{"version":3,"sources":["components/DeleteData.js","components/ConfirmData.js","components/ModelData.js","components/ModelDatas.js","components/DetailSearch.js","App.js","reportWebVitals.js","index.js"],"names":["DeleteData","props","useState","open","setOpen","data","handleClose","Button","variant","color","onClick","Dialog","onClose","DialogTitle","DialogContent","Typography","gutterBottom","DialogActions","e","preventDefault","onChangeData","id","useStyles","makeStyles","theme","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","child","display","independent","textAlign","dependent","input","margin","spacing","width","ConfirmData","classes","tests","Array","from","length","result","setResult","deleted","isDeleted","deleted_date","texts","i","push","TextField","className","label","event","target","value","onChange","parseFloat","name","language","type","loss_type","loss","accuracy","date_create","date_modify","href","dataSource","rel","code","model_json","tf","then","model","predict","arraySync","unstable_createMuiStrictModeTheme","ModelData","button","ThemeProvider","TableRow","TableCell","root","paper","marginLeft","marginRight","table","minwidth","tableHead","ModelDatas","dataType","setDataType","sortType","setSortType","changeSortType","onChangeSortType","ChangeData","lists","datas","Paper","Table","TableHead","TableBody","langs","modelTypes","DetailSearch","setName","setLossType","setDateCreate","setDateModify","lang","setLang","modelType","setModelType","select","map","option","MenuItem","onChangeSearchKeyword","drawerWidth","theme_preventerror","flexGrow","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","easeOut","enteringScreen","menuButton","hide","title","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","content","contentShift","inputInput","paddingLeft","drawerMenu","drawerSubMenu","marginleft","App","useTheme","searchKeyword","setSearchKeyword","arrayDatas","setDatas","menu_type","setMenuType","searchType","setSearchType","currentTime","now","Date","year","String","getFullYear","month","getMonth","getDate","AppBar","clsx","Toolbar","IconButton","aria-label","edge","noWrap","InputBase","placeholder","inputProps","newDatas","_","orderBy","fileData","JSON","stringify","blob","Blob","url","URL","createObjectURL","link","document","createElement","download","click","Drawer","anchor","direction","Divider","List","ListItemText","primary","text","index","ListItem","onChangeType","filter","c","indexOf","NaN","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.be365aa7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst DeleteData = (props) => {\r\n    const [open, setOpen] = useState(false);\r\n    const [data] = useState(props.data);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const deleteData = (e) => {\r\n        e.preventDefault();\r\n        props.onChangeData(data.id);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"contained\" color=\"secondary\" onClick={handleClickOpen}>삭제</Button>\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle onClose={handleClose}>삭제 경고</DialogTitle>\r\n                <DialogContent>\r\n                    <Typography gutterBottom>선택한 데이터가 삭제됩니다.</Typography>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={deleteData}>삭제</Button>\r\n                    <Button variant=\"outlined\" color=\"primary\" onClick={handleClose}>닫기</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeleteData;","import React, { useState } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n    child: {\r\n        display: \"inline-block\"\r\n    },\r\n    independent: {\r\n        textAlign: \"left\"\r\n    },\r\n    dependent: {\r\n        textAlign: \"right\"\r\n    },\r\n    input: {\r\n        margin: theme.spacing(1),\r\n        width: '25ch',\r\n    }\r\n}))\r\n\r\nconst ConfirmData = (props) => {\r\n    const classes = useStyles();\r\n    const [data] = useState(props.data);\r\n    const [open, setOpen] = useState(false);\r\n    var tests = Array.from({length: data.independent.length}, () => 0);\r\n    const [result, setResult] = useState(0);\r\n    \r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    } \r\n\r\n    const handleChange = (e, id) => {\r\n        tests[id] = parseFloat(e.target.value);\r\n    }\r\n    \r\n\r\n    const openData = () => {\r\n\r\n        if (data.language === \"파이썬\"){\r\n            if(data.model_json !== \"\") {\r\n                tf.loadLayersModel(data.model_json).then(function(model){\r\n                    let predict =  model.predict(tf.tensor(tests, [1,data.independent.length]))\r\n\r\n                    setResult(predict.arraySync()[0][0]);\r\n                    \r\n                })\r\n            }\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    let deleted = null;\r\n    if(data.isDeleted === true) {\r\n        deleted = <Typography variant=\"subtitle1\">삭제된 데이터입니다. 삭제 날짜: {data.deleted_date}</Typography>\r\n    }\r\n\r\n    var texts = []; \r\n    for (let i in data.independent){\r\n        texts.push(<TextField key={i} className={classes.input} id={data.independent[i]} label={data.independent[i]} variant=\"outlined\" onClick={(event) => {event.target.value = null}} onChange={(event) => handleChange(event, i)}/>)\r\n    }\r\n    \r\n\r\n    return(\r\n        <div>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleClickOpen}>확인</Button>\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle onClose={handleClose}>{data.name} by {data.language}</DialogTitle>\r\n                <DialogContent>\r\n                    <div className={classes.child}>\r\n                        {deleted}\r\n                        <Typography variant=\"subtitle2\">{data.type} 분석의 loss 형식은 {data.loss_type} 입니다.</Typography>\r\n                        <Typography variant=\"subtitle2\">loss: {data.loss} || accuracy: {data.accuracy}</Typography>\r\n                        <Typography variant=\"subtitle2\">생성 날짜: {data.date_create} || 수정 날짜: {data.date_modify}</Typography>\r\n                    </div>\r\n                    <div className={classes.child}>\r\n                        <Typography variant=\"h5\">테스트 분석 결과는 {result} 입니다.</Typography>\r\n                    </div>\r\n                    <hr/>\r\n                        {texts}\r\n                    <hr/>\r\n                    <Typography variant=\"body2\">데이터 출처: <a href={data.dataSource} target=\"_blank\" rel=\"noreferrer\">{data.dataSource}</a></Typography>\r\n                    <Typography variant=\"body2\">데이터 링크: <a href={data.data} target=\"_blank\" rel=\"noreferrer\">{data.data}</a></Typography>\r\n                    <Typography variant=\"body2\">코드 링크: <a href={data.code} target=\"_blank\" rel=\"noreferrer\">{data.code}</a></Typography>\r\n\r\n\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={openData}>테스트</Button>\r\n                    <Button variant=\"outlined\" color=\"primary\" onClick={handleClose}>닫기</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConfirmData;","import React, { useState } from \"react\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DeleteData from \"./DeleteData\";\r\n\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { unstable_createMuiStrictModeTheme } from \"@material-ui/core/styles\";\r\n\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport Papa from \"papaparse\";\r\nimport ConfirmData from \"./ConfirmData\";\r\n\r\nconst theme = unstable_createMuiStrictModeTheme();\r\n\r\nconst ModelData = (props) => {\r\n    const [data] = useState(props.data);\r\n\r\n    const deleteData = (id) => {\r\n        props.onChangeData(id)\r\n    }\r\n\r\n    const restoreData = (e) => {\r\n        e.preventDefault();\r\n        props.onChangeData(data.id)\r\n    }\r\n\r\n    var button = null;\r\n\r\n    if (data.isDeleted === false){\r\n        button = <ThemeProvider theme={theme}>\r\n                    <DeleteData data={data} onChangeData={deleteData}/>\r\n                    </ThemeProvider>;\r\n    } else {\r\n        button = <Button variant=\"contained\" color=\"secondary\" onClick={restoreData}>복원</Button>;\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n        <TableRow>\r\n            <TableCell>{data.name}</TableCell>\r\n            <TableCell>{data.type}</TableCell>\r\n            <TableCell>{data.loss_type}</TableCell>\r\n            <TableCell>{data.loss}</TableCell>\r\n            <TableCell>{data.accuracy}</TableCell>\r\n            <TableCell>{data.language}</TableCell>\r\n            <TableCell>{data.date_create}</TableCell>\r\n            <TableCell>{data.date_modify}</TableCell>\r\n            <TableCell>\r\n                <ThemeProvider theme={theme}>\r\n                    <ConfirmData data={data}></ConfirmData>\r\n                </ThemeProvider>\r\n            </TableCell>\r\n            <TableCell>\r\n                {button}\r\n            </TableCell>\r\n        </TableRow>\r\n    );\r\n}\r\n\r\nexport default ModelData;","import React, {useState} from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ModelData from \"./ModelData\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      margin: theme.spacing(3),\r\n    },\r\n    paper: {\r\n      marginLeft: 18,\r\n      marginRight: 18\r\n    },\r\n    table: {\r\n      minwidth: 1080\r\n    },\r\n    tableHead: {\r\n      fontSize: \"1.0rem\"\r\n    }\r\n}));\r\n\r\nconst ModelDatas = (props) => {\r\n\r\n    const [dataType, setDataType] = useState(\"id\");\r\n    const [sortType, setSortType] = useState(true);\r\n\r\n    const changeSortType = (event, type) => {\r\n        event.preventDefault();\r\n        if (dataType === type) {\r\n            setSortType(!sortType);\r\n        } else {\r\n            setDataType(type);\r\n            setSortType(true);\r\n        }\r\n        props.onChangeSortType(dataType, sortType);\r\n    }\r\n\r\n    const ChangeData = (e) => {\r\n        props.onChangeData(e);\r\n    }\r\n\r\n    const classes = useStyles();\r\n    var lists = [];\r\n    for (var i in props.datas){\r\n      lists.push(<ModelData key={props.datas[i].id} data={props.datas[i]} onChangeData={ChangeData}></ModelData>)\r\n    }\r\n    \r\n    return(\r\n        <div className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n              <Table className={classes.table}>\r\n                <TableHead className={classes.TableHead}>\r\n                  <TableRow>\r\n                    <TableCell><Button onClick={(event) => changeSortType(event, \"name\")}>이름</Button></TableCell>\r\n                    <TableCell><Button onClick={(event) => changeSortType(event, \"type\")}>회귀/분류</Button></TableCell>\r\n                    <TableCell><Button onClick={(event) => changeSortType(event, \"loss_type\")}>loss 종류</Button></TableCell>\r\n                    <TableCell><Button onClick={(event) => changeSortType(event, \"loss\")}>loss</Button></TableCell>\r\n                    <TableCell><Button onClick={(event) => changeSortType(event, \"accuracy\")}>정확도</Button></TableCell>\r\n                    <TableCell><Button onClick={(event) => changeSortType(event, \"language\")}>언어 종류</Button></TableCell>\r\n                    <TableCell><Button onClick={(event) => changeSortType(event, \"date_create\")}>생성 날짜</Button></TableCell>\r\n                    <TableCell><Button onClick={(event) => changeSortType(event, \"date_modify\")}>수정 날짜</Button></TableCell>\r\n                    <TableCell>확인</TableCell>\r\n                    <TableCell>삭제</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {lists}\r\n                </TableBody>\r\n              </Table>\r\n            </Paper>\r\n          </div>\r\n    );\r\n}\r\n\r\nexport default ModelDatas;","import React, {useState} from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginLeft: 10\r\n    },\r\n    input: {\r\n        margin: theme.spacing(1),\r\n        width: '25ch',\r\n    }\r\n}))\r\n\r\nconst langs = [\"\", \"파이썬\", \"자바스크립트\"];\r\nconst modelTypes = [\"\", \"회귀\", \"분류\"];\r\n\r\nconst DetailSearch = (props) => {\r\n    const [open, setOpen] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [loss_type, setLossType] = useState(\"\");\r\n    const [date_create, setDateCreate] = useState(\"\");\r\n    const [date_modify, setDateModify] = useState(\"\");\r\n    const [lang, setLang] = useState(\"\");\r\n    const [modelType, setModelType] = useState(\"\");\r\n    const classes = useStyles();\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    } \r\n\r\n    const handleName = (event) => {\r\n        setName(event.target.value);\r\n    }\r\n\r\n    const handleLossType = (event) => {\r\n        setLossType(event.target.value);\r\n    }\r\n\r\n    const handleDateCreate = (event) => {\r\n        setDateCreate(event.target.value);\r\n    }\r\n\r\n    const handleDateModify = (event) => {\r\n        setDateModify(event.target.value);\r\n    }\r\n\r\n    const handleLangChange = (event) => {\r\n        setLang(event.target.value);\r\n    }\r\n\r\n    const handleModelTypeChange = (event) => {\r\n        setModelType(event.target.value);\r\n    }\r\n\r\n    const onSendSearchKeyword = (event) => {\r\n        setOpen(false);\r\n        // console.log({name: name, modelType, loss_type, lang, date_create, date_modify});\r\n        props.onChangeSearchKeyword({name: name, type: modelType, loss_type: loss_type, language: lang, date_create: date_create, date_modify: date_modify});\r\n    }\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <Button variant=\"contained\" onClick={handleClickOpen}>상세 검색</Button>\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle onClose={handleClose}>상세 검색</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField className={classes.input} id=\"name\" label=\"이름\" variant=\"outlined\" onChange={handleName}/>\r\n                    <TextField\r\n                        className={classes.input}\r\n                        id=\"type\"\r\n                        select\r\n                        label=\"회귀/분류\"\r\n                        value={modelType}\r\n                        onChange={handleModelTypeChange}\r\n                        variant=\"outlined\"\r\n                        >\r\n                        {modelTypes.map((option) => (\r\n                            <MenuItem key={option} value={option}>\r\n                                {option}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </TextField>\r\n                    <TextField className={classes.input} id=\"loss_type\" label=\"Loss 종류\" variant=\"outlined\" onChange={handleLossType}/>\r\n                    <TextField\r\n                        className={classes.input}\r\n                        id=\"language\"\r\n                        select\r\n                        label=\"언어 종류\"\r\n                        value={lang}\r\n                        onChange={handleLangChange}\r\n                        variant=\"outlined\"\r\n                        >\r\n                        {langs.map((option) => (\r\n                            <MenuItem key={option} value={option}>\r\n                                {option}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </TextField>\r\n                    <TextField className={classes.input} id=\"date_create\" label=\"생성 날짜\" variant=\"outlined\" onChange={handleDateCreate}/>\r\n                    <TextField className={classes.input} id=\"date_modify\" label=\"수정 날짜\" variant=\"outlined\" onChange={handleDateModify}/>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onSendSearchKeyword}>검색</Button>\r\n                    <Button variant=\"outlined\" color=\"primary\" onClick={handleClose}>닫기</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DetailSearch;","import React, { useState } from \"react\";\r\nimport './App.css';\r\nimport ModelDatas from \"./components/ModelDatas\";\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { fade} from '@material-ui/core/styles';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport clsx from 'clsx';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport _ from \"lodash\";\r\nimport DetailSearch from \"./components/DetailSearch\";\r\n\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { unstable_createMuiStrictModeTheme } from \"@material-ui/core/styles\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport arrayDatas from \"./mainData.json\"\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst theme_preventerror = unstable_createMuiStrictModeTheme();\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n      },\r\n      appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n          easing: theme.transitions.easing.sharp,\r\n          duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n      },\r\n      appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n          easing: theme.transitions.easing.easeOut,\r\n          duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n      },\r\n      menuButton: {\r\n        marginRight: theme.spacing(2),\r\n      },\r\n      hide: {\r\n        display: 'none',\r\n      },\r\n      title: {\r\n        flexGrow: 1,\r\n        display: 'none',\r\n        [theme.breakpoints.up('sm')]: {\r\n          display: 'block',\r\n        },\r\n      },\r\n      search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n          backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n          marginLeft: theme.spacing(1),\r\n          width: 'auto',\r\n        },\r\n      },\r\n      searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n      inputRoot: {\r\n        color: 'inherit',\r\n      },\r\n      drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n      },\r\n      drawerPaper: {\r\n        width: drawerWidth,\r\n      },\r\n      drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n      },\r\n      content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n          easing: theme.transitions.easing.sharp,\r\n          duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n      },\r\n      contentShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create('margin', {\r\n          easing: theme.transitions.easing.easeOut,\r\n          duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n      },\r\n    \r\n      inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n          width: '12ch',\r\n          '&:focus': {\r\n            width: '20ch',\r\n          },\r\n        },\r\n      },\r\n    \r\n      drawerMenu: {\r\n        marginLeft: 20\r\n      },\r\n    \r\n      drawerSubMenu: {\r\n        marginLeft: 50\r\n      },\r\n\r\n      marginleft: {\r\n        marginLeft: 10\r\n      }\r\n}));\r\n\r\nconst App = () => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    \r\n    const [searchKeyword, setSearchKeyword] = useState({\r\n      name: \"\",\r\n      type: \"\",\r\n      loss_type: \"\",\r\n      language: \"\",\r\n      date_create: \"\",\r\n      date_modify: \"\"\r\n    });\r\n    const [datas, setDatas] = useState(arrayDatas);\r\n\r\n    const [menu_type, setMenuType] = useState(\"data\");\r\n    const [open, setOpen] = useState(false);\r\n    const [searchType, setSearchType] = useState(\"name\");\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    }\r\n    \r\n    const handleSearchKeywordNameChange = (e) => {\r\n        setSearchKeyword({name: e.target.value, type: \"\", loss_type: \"\", language: \"\", date_create: \"\", date_modify: \"\"});\r\n        setSearchType(\"name\");\r\n    }\r\n\r\n    const onChangeSearchKeyword = (e) => {\r\n      setSearchKeyword(e);\r\n      setSearchType(\"all\");\r\n    }\r\n    \r\n    const currentTime = () => {\r\n        let now = new Date();\r\n        let year = String(now.getFullYear());\r\n        let month = String(now.getMonth() + 1);\r\n        if (month.length === 1) {\r\n          month = \"0\"+month;\r\n        }\r\n        let date = String(now.getDate());\r\n        return year+month+date;\r\n    }\r\n\r\n    const onChangeData = (e) => {\r\n        let newDatas = Array.from(datas);\r\n        for (let i in datas){\r\n            if (newDatas[i].id === e){\r\n                if (newDatas[i].isDeleted === false) {\r\n                newDatas[i].isDeleted = true;\r\n                newDatas[i].deleted_date = currentTime();\r\n                } else {\r\n                newDatas[i].isDeleted = false;\r\n                newDatas[i].deleted_date = NaN;\r\n                }\r\n                setDatas(newDatas);\r\n            }\r\n        }\r\n    }\r\n\r\n    const filteredComponents = (data) => {\r\n        if( menu_type === \"data\"){\r\n            data = data.filter((c) => {\r\n            return c.isDeleted === false;\r\n            })\r\n        } else if (menu_type === \"removed\"){\r\n            data = data.filter((c) => {\r\n            return c.isDeleted === true;\r\n            })\r\n        }\r\n        if (searchType === \"name\") {\r\n          data = data.filter((c) => {\r\n            return c.name.indexOf(searchKeyword.name) > -1;\r\n          })\r\n        }\r\n        else {\r\n          data = data.filter((c) => {\r\n            return c.name.indexOf(searchKeyword.name) > -1;\r\n          })\r\n          data = data.filter((c) => {\r\n              return c.type.indexOf(searchKeyword.type) > -1;\r\n          })\r\n          data = data.filter((c) => {\r\n              return c.loss_type.indexOf(searchKeyword.loss_type) > -1;\r\n          })\r\n          data = data.filter((c) => {\r\n              return c.language.indexOf(searchKeyword.language) > -1;\r\n          })  \r\n          data = data.filter((c) => {\r\n              return c.date_create.indexOf(searchKeyword.date_create) > -1;\r\n          })\r\n          data = data.filter((c) => {\r\n              return c.date_modify.indexOf(searchKeyword.date_modify) > -1;\r\n          })\r\n        }\r\n        \r\n        return data;\r\n    }\r\n\r\n    const onChangeType = (e, index) => {\r\n        let menu_type_list = [\"all\", \"data\", \"removed\"];\r\n        setMenuType(menu_type_list[index]);\r\n    }\r\n\r\n    const onChangeSort = (dataType, sortType) => {\r\n      let newDatas = Array.from(datas);\r\n      if (sortType){\r\n        newDatas = _.orderBy(newDatas, [dataType], [\"asc\"])\r\n      } else {\r\n        newDatas = _.orderBy(newDatas, [dataType], [\"desc\"])\r\n      }\r\n      setDatas(newDatas);\r\n    }\r\n\r\n    const handleSaveFile = () => {\r\n      let newDatas = Array.from(datas);\r\n      newDatas = _.orderBy(newDatas, [\"id\"], [\"asc\"]);\r\n      const fileData = JSON.stringify(newDatas);\r\n      const blob = new Blob([fileData], {type: \"text/plain\"});\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.download = 'mainData.json';\r\n      link.href = url;\r\n      link.click();\r\n\r\n    }\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <AppBar\r\n            position=\"static\"\r\n            className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: open,\r\n            })}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        edge=\"start\"\r\n                        className={clsx(classes.menuButton, open && classes.hide)}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                        머신 러닝 데이터 분석 관리\r\n                    </Typography>\r\n\r\n                    <div className={classes.search}>\r\n                      <div className={classes.searchIcon}>\r\n                        <SearchIcon/>\r\n                      </div>\r\n                      <InputBase\r\n                          placeholder=\"검색하기\"\r\n                          classes={{\r\n                              root: classes.inputRoot,\r\n                              input: classes.inputInput,\r\n                          }}\r\n                          name=\"searchKeyword\"\r\n                          value={searchKeyword.name}\r\n                          onChange={handleSearchKeywordNameChange}\r\n                          inputProps={{ 'aria-label': 'search' }}\r\n                      />\r\n                    </div>\r\n                    <ThemeProvider theme={theme_preventerror}>\r\n                      <DetailSearch onChangeSearchKeyword={onChangeSearchKeyword}></DetailSearch>\r\n                    </ThemeProvider>\r\n                    <Button className={classes.marginleft} variant=\"contained\" onClick={handleSaveFile}>저장</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"persistent\"\r\n                anchor=\"left\"\r\n                open={open}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div className={classes.drawerHeader}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                    <List>\r\n                        <ListItemText primary=\"보기\" className={classes.drawerMenu}/>\r\n                        <List>\r\n                            {['전체보기', '데이터 확인', '휴지통'].map((text, index) => (\r\n                            <ListItem button key={text}>\r\n                                <ListItemText primary={text} className={classes.drawerSubMenu} onClick={(event) => onChangeType(event, index)}/>\r\n                            </ListItem>\r\n                            ))}\r\n                        </List>\r\n                    </List>\r\n                <Divider />\r\n            </Drawer>\r\n\r\n            <main\r\n                className={clsx(classes.content, {\r\n                [classes.contentShift]: open,\r\n            })}>\r\n                <div className={classes.drawerHeader} />\r\n                <ModelDatas\r\n                    datas={filteredComponents(datas)}\r\n                    searchKeyword={searchKeyword}\r\n                    onChangeData={onChangeData}\r\n                    onChangeSortType={onChangeSort}>\r\n                </ModelDatas>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}